package ptm.trainer.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URL;
import java.util.List;
import java.util.Locale;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.client.j2se.MatrixToImageConfig;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import ptm.team.service.T_SearchService;
import ptm.team.vo.MemberVO;

@Controller
@RequestMapping(value="/Trainer") 
public class T_SearchController 
{	
	@Inject
	private T_SearchService T_searchService; 
	
	@RequestMapping(value = "/T-Search")//uri
	public String join(){	
	
		return "Trainer/T-Search";//회원가입 화면으로 이동
	}
	@RequestMapping(value = "/qr_create.do", method={RequestMethod.GET, RequestMethod.POST})
	public void RandomQR(MemberVO membervo, MultipartHttpServletRequest mtfRequest) throws Exception 
	{
				int size = 0;
				char[] tmp = new char[6];
				for(int i=0; i<tmp.length; i++) {
					int div = (int) Math.floor( Math.random() * 2 );
					
					if(div == 0) { // 0이면 숫자로
						tmp[i] = (char) (Math.random() * 10 + '0') ;
					}else { //1이면 알파벳
						tmp[i] = (char) (Math.random() * 26 + 'A') ;
					}
					
					System.out.println(tmp);
					membervo.setM_qr(tmp.toString());
					package ptm.trainer.controller;

					import java.awt.image.BufferedImage;
					import java.io.File;
					import java.net.URL;
					import java.util.List;
					import java.util.Locale;

					import javax.imageio.ImageIO;
					import javax.inject.Inject;
					import javax.servlet.http.HttpServletRequest;

					import org.springframework.stereotype.Controller;
					import org.springframework.ui.Model;
					import org.springframework.web.bind.annotation.RequestMapping;
					import org.springframework.web.bind.annotation.RequestMethod;
					import org.springframework.web.bind.annotation.ResponseBody;
					import org.springframework.web.multipart.MultipartFile;
					import org.springframework.web.multipart.MultipartHttpServletRequest;

					import com.google.zxing.BarcodeFormat;
					import com.google.zxing.client.j2se.MatrixToImageConfig;
					import com.google.zxing.client.j2se.MatrixToImageWriter;
					import com.google.zxing.common.BitMatrix;
					import com.google.zxing.qrcode.QRCodeWriter;

					import ptm.team.service.T_SearchService;
					import ptm.team.vo.MemberVO;

					@Controller
					@RequestMapping(value="/Trainer") 
					public class T_SearchController 
					{	
						@Inject
						private T_SearchService T_searchService; 
						
						@RequestMapping(value = "/T-Search")//uri
						public String join(){	
						
							return "Trainer/T-Search";//회원가입 화면으로 이동
						}
						@RequestMapping(value = "/qr_create.do", method={RequestMethod.GET, RequestMethod.POST})
						public void RandomQR(MemberVO membervo, MultipartHttpServletRequest mtfRequest) throws Exception 
						{
									int size = 0;
									char[] tmp = new char[6];
									for(int i=0; i<tmp.length; i++) {
										int div = (int) Math.floor( Math.random() * 2 );
										
										if(div == 0) { // 0이면 숫자로
											tmp[i] = (char) (Math.random() * 10 + '0') ;
										}else { //1이면 알파벳
											tmp[i] = (char) (Math.random() * 26 + 'A') ;
										}
										
										System.out.println(tmp);
										membervo.setM_qr(tmp.toString());
								}
									
									int result = T_searchService.SelectQR(tmp.toString());
									if(result == 0) 
									{
										qr_create(membervo, mtfRequest);
									}
									else 
									{
										RandomQR(membervo, mtfRequest);
									}
									
						}
						
						
					    // qr코드 등록 및 생성
					    //@RequestMapping(value = "/qr_create.do", method={RequestMethod.GET, RequestMethod.POST})
					    public void qr_create(MemberVO membervo, MultipartHttpServletRequest mtfRequest) throws Exception{
					     		
					    	T_searchService.InsertMember(membervo);
					    	
					    	String m_name = membervo.getM_name();
					        String m_phone = membervo.getM_phone();
					        String m_email= membervo.getM_email();
					        String m_originP = membervo.getM_originP();
					        String m_qr = membervo.getM_qr();
					        
					        
					        String url = "http://localhost:9090/Member/M-List?m_qr="+m_qr;
					        //m_qr="+m_qr+"&m_phone="+m_phone+"&m_email="+m_email
					        
					        try {
					            File file = null;
					            // qr코드 이미지를 저장할 디렉토리 지정
					            file = new File("D:\\eunpyo\\PTM\\src\\main\\webapp\\resources\\Images");
					            if(!file.exists()) {
					                file.mkdirs();
					            }
					            // qr코드 인식시 이동할 url 주소	
					            String codeurl = new String(url.getBytes("UTF-8"), "ISO-8859-1");
					            // qr코드 바코드 생성값
					            int qrcodeColor = 0xFF2e4e96;
					            // qr코드 배경색상값 
					            int backgroundColor = 0xFFFFFFFF;
					              
					            QRCodeWriter qrCodeWriter = new QRCodeWriter();
					            // 3,4번째 parameter값 : width/height값 지정
					            BitMatrix bitMatrix = qrCodeWriter.encode(codeurl, BarcodeFormat.QR_CODE,300, 300);
					            //
					            MatrixToImageConfig matrixToImageConfig = new MatrixToImageConfig(qrcodeColor,backgroundColor);
					            BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix,matrixToImageConfig);
					            // ImageIO를 사용한 바코드 파일쓰기
					            ImageIO.write(bufferedImage, "png", new File("D:\\eunpyo\\PTM\\src\\main\\webapp\\resources\\Images\\"+m_qr+".png"));
					              
					        } catch (Exception e) {
					            e.printStackTrace();
					        }
					    }

					}	}
				
				int result = T_searchService.SelectQR(tmp.toString());
				if(result == 0) 
				{
					qr_create(membervo, mtfRequest);
				}
				else 
				{
					RandomQR(membervo, mtfRequest);
				}
				
	}
	
	
    // qr코드 등록 및 생성
    //@RequestMapping(value = "/qr_create.do", method={RequestMethod.GET, RequestMethod.POST})
    public void qr_create(MemberVO membervo, MultipartHttpServletRequest mtfRequest) throws Exception{
     		
    	T_searchService.InsertMember(membervo);
    	
    	String m_name = membervo.getM_name();
        String m_phone = membervo.getM_phone();
        String m_email= membervo.getM_email();
        String m_originP = membervo.getM_originP();
        String m_qr = membervo.getM_qr();
        
        
        String url = "http://localhost:9090/Member/M-List?m_qr="+m_qr;
        //m_qr="+m_qr+"&m_phone="+m_phone+"&m_email="+m_email
        
        try {
            File file = null;
            // qr코드 이미지를 저장할 디렉토리 지정
            file = new File("D:\\eunpyo\\PTM\\src\\main\\webapp\\resources\\Images");
            if(!file.exists()) {
                file.mkdirs();
            }
            // qr코드 인식시 이동할 url 주소	
            String codeurl = new String(url.getBytes("UTF-8"), "ISO-8859-1");
            // qr코드 바코드 생성값
            int qrcodeColor = 0xFF2e4e96;
            // qr코드 배경색상값 
            int backgroundColor = 0xFFFFFFFF;
              
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            // 3,4번째 parameter값 : width/height값 지정
            BitMatrix bitMatrix = qrCodeWriter.encode(codeurl, BarcodeFormat.QR_CODE,300, 300);
            //
            MatrixToImageConfig matrixToImageConfig = new MatrixToImageConfig(qrcodeColor,backgroundColor);
            BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix,matrixToImageConfig);
            // ImageIO를 사용한 바코드 파일쓰기
            ImageIO.write(bufferedImage, "png", new File("D:\\eunpyo\\PTM\\src\\main\\webapp\\resources\\Images\\"+m_qr+".png"));
              
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}